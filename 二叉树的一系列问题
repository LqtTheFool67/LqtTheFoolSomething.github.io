#### [114. 二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/)



![image-20220502211729012](C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220502211729012.png)



```java
class Solution {
    public void flatten(TreeNode root) {
        while(root != null){
            if(root.left == null){
                root = root.right;
            }else{
                TreeNode temp = root.left;
                while(temp.right != null){
                    //找到左子树的右边最后一个叶子结点
                    temp = temp.right;
                }
                	//把根的右子树拼接到上边
                    temp.right = root.right;
                	//再把根的左子树插入到右子树对应位置
                    root.right = root.left;
                	//左子树置为空
                    root.left = null;
            }
        }
    }
}
```

思路：

```
   1
   / \
  2   5
 / \   \
3   4   6

//将 1 的左子树插入到右子树的地方
    1
     \
      2         5
     / \         \
    3   4         6        
//将原来的右子树接到左子树的最右边节点
    1
     \
      2          
     / \          
    3   4  
         \
          5
           \
            6
            
 //将 2 的左子树插入到右子树的地方
    1
     \
      2          
       \          
        3       4  
                 \
                  5
                   \
                    6   
        
 //将原来的右子树接到左子树的最右边节点
    1
     \
      2          
       \          
        3      
         \
          4  
           \
            5
             \
              6         
  
  ......

```

------

#### [543. 二叉树的直径](https://leetcode-cn.com/problems/diameter-of-binary-tree/)

![image-20220502212422239](C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220502212422239.png)

```java
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        dfs(root);
        return max - 1;
    }



    public int dfs(TreeNode root){
        if(root == null){
            return 0;
        }
        int leftSize = dfs(root.left);
        int rightSize = dfs(root.right);
        max = Math.max(max,leftSize + rightSize + 1);
        return Math.max(leftSize , rightSize) + 1;
    }
}
```

**思路：**

 **1.找到左边的深度，加上右边的深度就是最短路径的最大值**

 **2.有可能最长的路径不经过根节点，所以需要每一个结点都假设为根节点进行遍历。**

 **3.记录每一个结点的max,然后更新max.**



------

#### [236. 二叉树的最近公共祖先](https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/)

![image-20220502212833088](C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220502212833088.png)

```java
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null){
            return root;
        }

        if(root == p || root == q){
            return root;
        }

        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        if(left != null && right != null){
            return root;
        }else if(left != null){
            return left;
        }else if(right != null){
            return right;
        }
        return null;
        
    }
}
```

**思路：**

**1.就是逆向思维，从根节点出发，看看能不能找到目标节点分散在左右两侧**

**2.如果有某个目标节点就是根节点的值，说明他们在一个线路上，这是直接返回根节点的值**

**3.如果分散在某一侧，则另一侧肯定找不到，则为null，这是就在另一侧进行寻找**