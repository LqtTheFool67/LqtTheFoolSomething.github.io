#### [56. 合并区间](https://leetcode-cn.com/problems/merge-intervals/)

```java
以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。

 
示例 1：

输入：intervals = [[1,3],[2,6],[8,10],[15,18]]
输出：[[1,6],[8,10],[15,18]]
解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2：

输入：intervals = [[1,4],[4,5]]
输出：[[1,5]]
解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。

```

这种题目算是比较讨巧的题目，没用到什么数据结构和算法的内容，但是考验编写代码的能力。

```java
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<>(){
            @Override
            public int compare(int[] o1, int[] o2)
            {   return o1[0] - o2[0];}
        });       
        int[][] res = new int [intervals.length][2];
        int index = -1;
        for(int[] interval : intervals){
            if(index == -1 || interval[0] > res[index][1]){
                res[++index] = interval;
            } else {
                res[index][1] = Math.max(res[index][1],interval[1]);
            }
        }
        return Arrays.copyOf(res , index + 1);
    }
}
```

**思路：**

**就是如果某个区间的最左边的值大于res数组中最右边的元素的值，那么他们一定无法合并，直接添加到res数组中去。**

**如果不大于，直接和res当前的值进行比较，将最大的值作为res最右边的值，添加进去。**