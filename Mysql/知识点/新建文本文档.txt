### 1.1 日志类型



MySQL有不同类型的日志文件，用来存储不同类型的日志，分为二进制日志、错误日志、通用查询日志
和慢查询日志，这也是常用的4种。MySQL 8又新增两种支持的日志： 中继日志和数据定义语句日志。使
用这些日志文件，可以查看MySQL内部发生的事情。



**这6类日志分别为**：
**慢查询日志：**记录所有执行时间超过long_query_time的所有查询，方便我们对查询进行优化。
**通用查询日志：**记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令，
对我们复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。
**错误日志：**记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的
状态，从而对服务器进行维护。
**二进制日志**：记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故
障时数据的无损失恢复。
**中继日志：**用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。
从服务器通过读取中继日志的内容，来同步主服务器上的操作。
**数据定义语句日志**：记录数据定义语句执行的元数据操作。

**除二进制日志外，其他日志都是文本文件。默认情况下，所有日志创建于MySQL数据目录中。**



5. ### 二进制日志(bin log)

  **binlog可以说是MySQL中比较重要的日志了，在日常开发及运维过程中，经常会遇到。**
  **binlog即binary log，二进制日志文件，也叫作变更日志（update log）。它记录了数据库所有执行的**
  **DDL 和DML 等数据库更新事件的语句，但是不包含没有修改任何数据的语句（如数据查询语句select、**
  **show等）。**

  #### binlog主要应用场景：

  **一是用于数据恢复**
  **二是用于数据复制**
  ![image-20220511102654882](C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220511102654882.png)



#### 1.mysql原子性的保证是利用了undo log。undo log名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的sql语句，他需要记录你要回滚的相应日志信息。undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。

####  2.mysql持久性的保证是利用了redo log。Mysql是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再刷回磁盘上。如果此时突然宕机，内存中的数据就会丢失。redo log包括两部分：一是内存中的日志缓冲(redo log buffer)，该部分日志是易失性的；二是磁盘上的重做日志文件(redo log file)，该部分日志是持久的。innodb通过force log at commit机制实现事务的持久性，即在事务提交的时候，必须先将该事务的所有事务日志写入到磁盘上的redo log file和undo log file中进行持久化。

####  3.mysql一致性的保证是从2个方面来保证的。从数据库层面来看，A(原子性)、I(隔离性)、D(持久性)是手段，是为了保证一致性，数据库提供的手段。数据库必须要实现AID三大特性，才有可能实现一致性。





但是，如果你在事务里故意写出违反约束的代码，一致性还是无法保证的。例如，你在转账的例子中，你的代码里故意不给B账户加钱，那一致性还是无法保证。因此，还必须从应用层角度考虑。从应用层面，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据！
-----------------------------------


